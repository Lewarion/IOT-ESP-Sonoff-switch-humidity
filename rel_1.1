#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoOTA.h>
#include <WiFiManager.h>
#include <DHT.h>

#define relay_pin 12 // relay connected to  GPIO12
#define ext_switch_pin 4 // switch connected to GPIO4
#define ext_sensor_pin 2 // DHT connected to GPIO2 (LOG pin on the sonoff)
#define DHTTYPE DHT11 // this is redundant but idc

bool humidity_control = true;
float max_humidity = 37;
const int measurement_interval = 5000;

bool relay_status = false;
bool humidity_detected = false;

int saved_ext_switch_status;
unsigned long current_time = 0;

//DHT part
DHT dht(ext_sensor_pin, DHTTYPE);

//WifiManager part
WiFiEventHandler disconnectedEventHandler;

//MQTTpart
const char* ESP_ID = "esp_switch_bathroom_01";
const char* mqtt_server = "192.168.1.100";
const char* switch_topic_request = "esp_switch_bathroom_01/request";
const char* switch_topic_status = "esp_switch_bathroom_01/status";
const char* switch_topic_log = "esp_switch_bathroom_01/log";

WiFiClient espClient;
PubSubClient client(espClient);

#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE]; // this is dumb; will overwrite it later.

//functions

void setup_wifi() {
  
  WiFiManager wifiManager;
  wifiManager.setConfigPortalTimeout(180);
  wifiManager.autoConnect(ESP_ID, "esp_root");
  
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void setup_OTA() {
  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  ArduinoOTA.setHostname(ESP_ID);
  ArduinoOTA.setPassword("esp_root");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");
  // y tho

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
}

void callback(char* topic, byte* payload, unsigned int length) {

  if ((char)payload[0] == '1') {
    digitalWrite(relay_pin,HIGH);
    relay_status = true;
    client.publish(switch_topic_status, "1",true); // some issue about utilising the same payload on pub and sub - worth checking if payload is meant to be different
  }
  else if ((char)payload[0] == '0') {
    digitalWrite(relay_pin,LOW);
    relay_status = false;
    client.publish(switch_topic_status, "0",true);
  }

}

void reconnect() {
  while (!client.connected()) {
    // Attempt to connect
    if (client.connect(ESP_ID)) {
      client.subscribe(switch_topic_request);
    } else {
      delay(5000);
    }
  }
}

void read_ext_switch(){

  int current_ext_switch_status; 
  current_ext_switch_status = digitalRead(ext_switch_pin);

  if (current_ext_switch_status != saved_ext_switch_status)
  {
    if (relay_status) {
      digitalWrite(relay_pin,LOW);
      relay_status = false;
      client.publish(switch_topic_status, "0",true);
    }
    else if (!relay_status) {
      digitalWrite(relay_pin,HIGH);
      relay_status = true;
      client.publish(switch_topic_status, "1",true);
    }
    saved_ext_switch_status = current_ext_switch_status;
  }
}

void read_ext_sensor(){

  char humidity_reading_buffer[4];
  float humidity_reading = dht.readHumidity();
  
  dtostrf(humidity_reading,3,1,humidity_reading_buffer);
  
  client.publish(switch_topic_log, humidity_reading_buffer,true);

  if(humidity_control){

    if(humidity_reading >= max_humidity){
      humidity_detected = true;
      
      digitalWrite(relay_pin,HIGH);
      relay_status = true;
      client.publish(switch_topic_status, "1",true);
    }
    else if (humidity_detected){
      humidity_detected = false;

      digitalWrite(relay_pin,LOW);
      relay_status = false;
      client.publish(switch_topic_status, "0",true);
    } 
  }
  
  current_time = millis();
}

void setup() {
  Serial.begin(115200);
  Serial.println("Booting...");

  dht.begin();

  setup_wifi();
  setup_OTA();

  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  client.subscribe(switch_topic_request);

  disconnectedEventHandler = WiFi.onStationModeDisconnected([](const WiFiEventStationModeDisconnected& event)
  {
    delay(5000);
    ESP.restart();
    }
   ); //no idea how it works;

   pinMode(relay_pin, OUTPUT);
   pinMode(ext_switch_pin, INPUT_PULLUP);
   
}

void loop() {
  ArduinoOTA.handle();

  if (!client.connected())
    reconnect();
    
  client.loop();
  read_ext_switch();

  if ((unsigned long)(millis() - current_time) > measurement_interval) //prevents millis() overflow issue
    read_ext_sensor();
  
}
